<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaelyn</title>
  
  
  <link href="https://shaelyn.github.io/atom.xml" rel="self"/>
  
  <link href="https://shaelyn.github.io/"/>
  <updated>2022-03-20T10:19:35.675Z</updated>
  <id>https://shaelyn.github.io/</id>
  
  <author>
    <name>Shaelyn Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础知识</title>
    <link href="https://shaelyn.github.io/2022/03/16/javaBasis/"/>
    <id>https://shaelyn.github.io/2022/03/16/javaBasis/</id>
    <published>2022-03-16T12:08:22.000Z</published>
    <updated>2022-03-20T10:19:35.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h2><ul><li>面向对象（封装，继承，多态）</li><li>平台无关性，一次编写，随处运行(Write once, run anywhere) -&gt; 跨平台；保证这一点的正是JVM机制</li><li>支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）</li><li>编译与解释并存</li></ul><h2 id="比较需要关注的方面"><a href="#比较需要关注的方面" class="headerlink" title="比较需要关注的方面:"></a>比较需要关注的方面:</h2><ul><li>jvm 内存区域/垃圾回收</li><li>类加载过程 class loader</li><li>反射/泛型/lamda</li><li>IO/NIO</li><li>解释执行/动态编译</li></ul><h2 id="JVM、JDK、JRE的区别"><a href="#JVM、JDK、JRE的区别" class="headerlink" title="JVM、JDK、JRE的区别"></a>JVM、JDK、JRE的区别</h2><p>JVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p><p>JRE： Java Runtime Environment, Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p><p>JDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p><img src="/public/images/jvm_jdk_jre.png" alt="alt"><br><img src="/2022/03/16/javaBasis/jvm_jdk_jre.png" alt="alt"></p><h2 id="Exception-Error"><a href="#Exception-Error" class="headerlink" title="Exception/Error"></a>Exception/Error</h2><h2 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="==和equals的区别"></a>==和equals的区别</h2><p>== 对于基本类型和引用类型的作用效果是不同的:</p><ul><li>对于基本数据类型来说，==比较的是值</li><li>对于引用数据类型来说，==比较的是对象的内存地址<blockquote><p>因为java只有值传递，所有对于==而言，不管是比较基本数据类型还是引用数据类型，本质都是比较值，只是引用类型变量存的值是对象的地址<br><code>equals</code>的比较：</p></blockquote></li></ul><ol><li>类没有覆盖<code>equals()</code>方法，等价于==，使用的默认是Object类equals()方法</li><li>类覆盖了<code>equals()</code>方法，一般都会覆盖<code>equals()</code>方法来比较两个对象的值是否相等，如String<h3 id="equals-hashcode"><a href="#equals-hashcode" class="headerlink" title="equals() / hashcode()"></a>equals() / hashcode()</h3></li></ol><ul><li>如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。 </li><li>如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。 </li><li>如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java语言特点&quot;&gt;&lt;a href=&quot;#Java语言特点&quot; class=&quot;headerlink&quot; title=&quot;Java语言特点&quot;&gt;&lt;/a&gt;Java语言特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;面向对象（封装，继承，多态）&lt;/li&gt;
&lt;li&gt;平台无关性，一次编写，随处运行(</summary>
      
    
    
    
    <category term="java" scheme="https://shaelyn.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 141 环形链表</title>
    <link href="https://shaelyn.github.io/2020/02/17/hasCycle/"/>
    <id>https://shaelyn.github.io/2020/02/17/hasCycle/</id>
    <published>2020-02-17T13:38:46.000Z</published>
    <updated>2022-02-17T13:42:56.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点 head ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>遍历node存入hashset，看是否已存在</li><li>快慢指针</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给你一个链表的头节点 head ，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表</summary>
      
    
    
    
    <category term="算法" scheme="https://shaelyn.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 31 下一个排列</title>
    <link href="https://shaelyn.github.io/2020/02/17/next-permutation/"/>
    <id>https://shaelyn.github.io/2020/02/17/next-permutation/</id>
    <published>2020-02-17T11:10:18.000Z</published>
    <updated>2022-03-20T09:16:27.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p><span id="more"></span><ul><li><p>例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。<br>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p></li><li><p>例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。</p></li><li><p>类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。<br>而-  arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。<br>给你一个整数数组 nums ，找出 nums 的下一个排列。</p></li></ul><p>必须 原地 修改，只允许使用额外常数空间。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>从后向前查找第一个相邻升序的元素对(i，j), A[i] &lt; A[j] =&gt;(j,end)必然降序 (无升序元素对=&gt;[begin,end]降序，直接步骤4逆转)</li><li>在[j,end) 从后向前找第一个满足A[k] &gt; A[i]</li><li>交换A[i],A[k] =&gt; (j,end)必然降序</li><li>逆转(j,end)</li></ol><p><img src="/2020/02/17/next-permutation/step1.png"><br><img src="/2020/02/17/next-permutation/step2.png"><br><img src="/2020/02/17/next-permutation/step3.png"><br><img src="/2020/02/17/next-permutation/step4.png"></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; nums[i]&gt;=nums[j]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> k=len-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k&gt;j &amp;&amp; nums[k]&lt;=nums[i]) &#123;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, i, k);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverse(nums, j, len-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> end-begin+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> len/<span class="number">2</span>+len%<span class="number">2</span>+begin;</span><br><span class="line">        <span class="keyword">while</span> (start&lt;=end) &#123;</span><br><span class="line">            swap(nums, start, begin+end-start);</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://shaelyn.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建github.io</title>
    <link href="https://shaelyn.github.io/2020/02/16/hexo_blog/"/>
    <id>https://shaelyn.github.io/2020/02/16/hexo_blog/</id>
    <published>2020-02-15T16:00:00.000Z</published>
    <updated>2022-02-17T13:28:02.144Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo搭建github.io创建blog,分为以下四步:</p><span id="more"></span><ol><li>github创建repo</li><li>Node.js安装</li><li>Hexo安装</li><li>Hexo主题更换</li></ol><p>此处省略第一二步，有时间再补</p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><ol><li>npm安装hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>hexo初始化: 命令貌似需要在根目录执行，否则会报错<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure></li><li>进入blog文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate (hexo g)</span><br><span class="line">$ hexo server (hexo s)</span><br></pre></td></tr></table></figure></li><li>更新到remote<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy (hexo d)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo主题更换"><a href="#Hexo主题更换" class="headerlink" title="Hexo主题更换"></a>Hexo主题更换</h2><p>hexo的主题url: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> (点主题下方的name可以进入对应的git repo)<br>以下拿next举例:</p><ol><li><p>安装主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>修改_config.yml<br>theme: next</p></li><li><p>测试部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo设置categories-tags"><a href="#Hexo设置categories-tags" class="headerlink" title="Hexo设置categories/tags"></a>Hexo设置categories/tags</h2><ol><li><p>在根目录下scaffolds/post.md中，添加一行 categories:</p></li><li><p>new page</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>在categories/index.md最后加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>tags同理</p></li><li><p>编写md文章的时候，在开头加上categories: 的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo搭建github.io</span><br><span class="line">categories: </span><br><span class="line">  - 配置</span><br><span class="line">tags: </span><br><span class="line">  - Hexo</span><br><span class="line">date: 2020-02-16 00:00:00</span><br></pre></td></tr></table></figure><h2 id="Hexo插入图片"><a href="#Hexo插入图片" class="headerlink" title="Hexo插入图片"></a>Hexo插入图片</h2></li><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>hexo的配置文件 _config.yml<br>post_asset_folder: true</p></li><li><p>自动生成文章同名文件夹用于存放照片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;file-name&gt;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hexo搭建github.io创建blog,分为以下四步:&lt;/p&gt;</summary>
    
    
    
    <category term="配置" scheme="https://shaelyn.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="https://shaelyn.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
