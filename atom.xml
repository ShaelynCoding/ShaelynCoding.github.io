<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaelyn</title>
  
  
  <link href="https://shaelyncoding.github.io/atom.xml" rel="self"/>
  
  <link href="https://shaelyncoding.github.io/"/>
  <updated>2022-04-05T07:55:02.291Z</updated>
  <id>https://shaelyncoding.github.io/</id>
  
  <author>
    <name>Shaelyn Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis</title>
    <link href="https://shaelyncoding.github.io/2022/04/05/redis/"/>
    <id>https://shaelyncoding.github.io/2022/04/05/redis/</id>
    <published>2022-04-05T07:49:05.000Z</published>
    <updated>2022-04-05T07:55:02.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis基本数据类型"><a href="#Redis基本数据类型" class="headerlink" title="Redis基本数据类型"></a>Redis基本数据类型</h2><h2 id="Redis为什么快？"><a href="#Redis为什么快？" class="headerlink" title="Redis为什么快？"></a>Redis为什么快？</h2><h2 id="Redis-6-0之后引入多线程"><a href="#Redis-6-0之后引入多线程" class="headerlink" title="Redis 6.0之后引入多线程"></a>Redis 6.0之后引入多线程</h2><h2 id="Redis热key"><a href="#Redis热key" class="headerlink" title="Redis热key"></a>Redis热key</h2><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h2 id="Redis过期策略"><a href="#Redis过期策略" class="headerlink" title="Redis过期策略"></a>Redis过期策略</h2><h2 id="Redis内存淘汰机制"><a href="#Redis内存淘汰机制" class="headerlink" title="Redis内存淘汰机制"></a>Redis内存淘汰机制</h2><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h2 id="Redis主从架构"><a href="#Redis主从架构" class="headerlink" title="Redis主从架构"></a>Redis主从架构</h2><h2 id="Redis-哨兵机制"><a href="#Redis-哨兵机制" class="headerlink" title="Redis 哨兵机制"></a>Redis 哨兵机制</h2><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis基本数据类型&quot;&gt;&lt;a href=&quot;#Redis基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;Redis基本数据类型&quot;&gt;&lt;/a&gt;Redis基本数据类型&lt;/h2&gt;&lt;h2 id=&quot;Redis为什么快？&quot;&gt;&lt;a href=&quot;#Redis为什</summary>
      
    
    
    
    <category term="Java" scheme="https://shaelyncoding.github.io/categories/Java/"/>
    
    <category term="Redis" scheme="https://shaelyncoding.github.io/categories/Java/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://shaelyncoding.github.io/2022/04/04/mysql/"/>
    <id>https://shaelyncoding.github.io/2022/04/04/mysql/</id>
    <published>2022-04-04T13:12:53.000Z</published>
    <updated>2022-04-05T07:55:02.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyISAM和InnoDB的区别"><a href="#MyISAM和InnoDB的区别" class="headerlink" title="MyISAM和InnoDB的区别"></a>MyISAM和InnoDB的区别</h2><h2 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h2><h2 id="索引底层数据结构"><a href="#索引底层数据结构" class="headerlink" title="索引底层数据结构"></a>索引底层数据结构</h2><h2 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h2><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><h2 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h2><h2 id="覆盖索引和回表"><a href="#覆盖索引和回表" class="headerlink" title="覆盖索引和回表"></a>覆盖索引和回表</h2><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><h2 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h2><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><h2 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h2><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><h2 id="MySQL主从同步"><a href="#MySQL主从同步" class="headerlink" title="MySQL主从同步"></a>MySQL主从同步</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MyISAM和InnoDB的区别&quot;&gt;&lt;a href=&quot;#MyISAM和InnoDB的区别&quot; class=&quot;headerlink&quot; title=&quot;MyISAM和InnoDB的区别&quot;&gt;&lt;/a&gt;MyISAM和InnoDB的区别&lt;/h2&gt;&lt;h2 id=&quot;索引优缺点&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="DataBase" scheme="https://shaelyncoding.github.io/categories/DataBase/"/>
    
    
  </entry>
  
  <entry>
    <title>network</title>
    <link href="https://shaelyncoding.github.io/2022/03/30/network/"/>
    <id>https://shaelyncoding.github.io/2022/03/30/network/</id>
    <published>2022-03-30T14:43:08.000Z</published>
    <updated>2022-04-04T13:12:45.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><h2 id="TCP-四层模型"><a href="#TCP-四层模型" class="headerlink" title="TCP 四层模型"></a>TCP 四层模型</h2><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h2><h2 id="TCP-amp-UDP"><a href="#TCP-amp-UDP" class="headerlink" title="TCP &amp; UDP"></a>TCP &amp; UDP</h2><h2 id="TCP协议如何保证可靠传输"><a href="#TCP协议如何保证可靠传输" class="headerlink" title="TCP协议如何保证可靠传输"></a>TCP协议如何保证可靠传输</h2><h2 id="浏览器请求一个网站的过程"><a href="#浏览器请求一个网站的过程" class="headerlink" title="浏览器请求一个网站的过程"></a>浏览器请求一个网站的过程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OSI-七层模型&quot;&gt;&lt;a href=&quot;#OSI-七层模型&quot; class=&quot;headerlink&quot; title=&quot;OSI 七层模型&quot;&gt;&lt;/a&gt;OSI 七层模型&lt;/h2&gt;&lt;h2 id=&quot;TCP-四层模型&quot;&gt;&lt;a href=&quot;#TCP-四层模型&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="https://shaelyncoding.github.io/2022/03/27/spring/"/>
    <id>https://shaelyncoding.github.io/2022/03/27/spring/</id>
    <published>2022-03-27T15:28:50.000Z</published>
    <updated>2022-03-28T13:27:03.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring如何解决循环依赖"><a href="#Spring如何解决循环依赖" class="headerlink" title="Spring如何解决循环依赖"></a>Spring如何解决循环依赖</h2><h2 id="Spring的AOP有几种实现方式"><a href="#Spring的AOP有几种实现方式" class="headerlink" title="Spring的AOP有几种实现方式"></a>Spring的AOP有几种实现方式</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring如何解决循环依赖&quot;&gt;&lt;a href=&quot;#Spring如何解决循环依赖&quot; class=&quot;headerlink&quot; title=&quot;Spring如何解决循环依赖&quot;&gt;&lt;/a&gt;Spring如何解决循环依赖&lt;/h2&gt;&lt;h2 id=&quot;Spring的AOP有几种实现方式</summary>
      
    
    
    
    <category term="spring" scheme="https://shaelyncoding.github.io/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>javaThread</title>
    <link href="https://shaelyncoding.github.io/2022/03/27/javaThread/"/>
    <id>https://shaelyncoding.github.io/2022/03/27/javaThread/</id>
    <published>2022-03-27T12:44:57.000Z</published>
    <updated>2022-04-12T02:58:55.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><h3 id="产生死锁的条件"><a href="#产生死锁的条件" class="headerlink" title="产生死锁的条件"></a>产生死锁的条件</h3><h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><h2 id="sleep-amp-wait"><a href="#sleep-amp-wait" class="headerlink" title="sleep() &amp; wait()"></a>sleep() &amp; wait()</h2><h2 id="Thread-start-会调用-run-为什么不直接调用run"><a href="#Thread-start-会调用-run-为什么不直接调用run" class="headerlink" title="Thread start() 会调用 run(),  为什么不直接调用run"></a>Thread start() 会调用 run(),  为什么不直接调用run</h2><h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h2 id="锁优化机制"><a href="#锁优化机制" class="headerlink" title="锁优化机制"></a>锁优化机制</h2><h2 id="乐观锁-amp-悲观锁"><a href="#乐观锁-amp-悲观锁" class="headerlink" title="乐观锁 &amp; 悲观锁"></a>乐观锁 &amp; 悲观锁</h2><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h2 id="对象头包含的内容"><a href="#对象头包含的内容" class="headerlink" title="对象头包含的内容"></a>对象头包含的内容</h2><h2 id="synchronized-amp-RentreenantLock"><a href="#synchronized-amp-RentreenantLock" class="headerlink" title="synchronized &amp; RentreenantLock"></a>synchronized &amp; RentreenantLock</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h3 id="RentreenantLock的底层原理"><a href="#RentreenantLock的底层原理" class="headerlink" title="RentreenantLock的底层原理"></a>RentreenantLock的底层原理</h3><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><h2 id="JMM内存模型"><a href="#JMM内存模型" class="headerlink" title="JMM内存模型"></a>JMM内存模型</h2><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><strong>优点</strong></p><p><strong>submit() &amp; execute()</strong></p><p><strong>shutDown() &amp; shutDownNow()</strong></p><p><strong>isTerminated() &amp; isShutDown()</strong></p><h3 id="ThreadPoolExecutor类型"><a href="#ThreadPoolExecutor类型" class="headerlink" title="ThreadPoolExecutor类型"></a>ThreadPoolExecutor类型</h3><h3 id="ThreadPoolExecutor构造的重要参数"><a href="#ThreadPoolExecutor构造的重要参数" class="headerlink" title="ThreadPoolExecutor构造的重要参数"></a>ThreadPoolExecutor构造的重要参数</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线程和进程&quot;&gt;&lt;a href=&quot;#线程和进程&quot; class=&quot;headerlink&quot; title=&quot;线程和进程&quot;&gt;&lt;/a&gt;线程和进程&lt;/h2&gt;&lt;h2 id=&quot;线程的生命周期&quot;&gt;&lt;a href=&quot;#线程的生命周期&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="java" scheme="https://shaelyncoding.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>jvm</title>
    <link href="https://shaelyncoding.github.io/2022/03/21/jvm/"/>
    <id>https://shaelyncoding.github.io/2022/03/21/jvm/</id>
    <published>2022-03-21T03:55:14.000Z</published>
    <updated>2022-04-20T09:06:43.018Z</updated>
    
    <content type="html"><![CDATA[<p>JVM(Java Virtual Machine) - Java 虚拟机，它是 Java 实现平台无关性的基石。</p><p>Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。</p><span id="more"></span><h2 id="JVM-内存区域"><a href="#JVM-内存区域" class="headerlink" title="JVM 内存区域"></a>JVM 内存区域</h2><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。<br>JDK 1.6<br><img src="/2022/03/21/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8C%BA%E5%9F%9F_JDK1.6.png" alt="JDK1.6 运行时数据区域"><br>JDK 1.8<br><img src="/2022/03/21/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8C%BA%E5%9F%9F_JDK1.8.png" alt="JDK1.8 运行时数据区域"></p><p>线程私有的：</p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p>线程共享的：</p><ul><li>堆</li><li>方法区</li><li>直接内存 (非运行时数据区的一部分)</li></ul><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令</strong>，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p><p>另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><p>从上面的介绍中我们知道程序计数器主要有两个作用：</p><p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。<br>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。<br>注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p><h3 id="Java虚拟栈"><a href="#Java虚拟栈" class="headerlink" title="Java虚拟栈"></a>Java虚拟栈</h3><p>Java 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。</p><blockquote><p>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。<br>StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。<br>OutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p></blockquote><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。（ 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。）</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“几乎”所有的对象实例都在这里分配内存。</p><p>Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现新生代、老年代、Eden空间、From Survivor空间、To Survivor空间等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p><p>方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。</p><p><strong>方法区和永久代的关系</strong></p><blockquote><p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p></blockquote><p><strong>常用参数</strong></p><p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize=N <span class="comment">//方法区 (永久代) 初始大小</span></span><br><span class="line">-XX:MaxPermSize=N <span class="comment">//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></span><br></pre></td></tr></table></figure><p>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</p><p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p>下面是一些常用参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=N <span class="comment">//设置 Metaspace 的初始（和最小大小）</span></span><br><span class="line">-XX:MaxMetaspaceSize=N <span class="comment">//设置 Metaspace 的最大大小</span></span><br></pre></td></tr></table></figure><p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p><p><strong>为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?</strong></p><p>1.整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</p><blockquote><p>当元空间溢出时会得到如下错误： java.lang.OutOfMemoryError: MetaSpace</p></blockquote><p>你可以使用 -XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。-XX：MetaspaceSize 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p><p>2.元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。</p><p>3.在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。</p><p>下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5<br><img src="/2022/03/21/jvm/metaSpace.png" alt="MetaSpace"></p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。</p><p>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代<br>JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。<br>JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</p><h2 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h2><p>new一个新的对象，首先查看类是否加载<br>如果已经加载 =&gt; 分配内存空间 =&gt; 实例变量赋默认值 =&gt; 设置对象头 =&gt; 执行初始化方法<br>未加载 =&gt; 类加载 =&gt; 连接（验证=&gt;准备=&gt;解析）=&gt; 初始化</p><blockquote><p>分配内存空间：</p></blockquote><ol><li>指针碰撞，用</li><li>空闲列表</li></ol><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>加载 =&gt;  连接（验证=&gt;准备=&gt;解析）=&gt; 初始化 =&gt; 使用 =&gt; 卸载<br><strong>加载</strong></p><ol><li>将字节码转成二进制字节流</li><li>二进制字节流所代表的静态存储结构转换到方法去的运行时数据结构</li><li>在内存生成class对象</li></ol><p><strong>验证</strong></p><ol><li>文件格式验证：验证字节流是否符合class文件格式规范</li><li>元数据验证：如此类是否有父类，收否继承了不允许被继承的累</li><li>字节码验证</li><li>符号引用验证</li></ol><p><strong>准备</strong><br>为静态变量，常量分配内存并赋默认值（实例变量会在对象实例化时随对象分配在java堆中）</p><p><strong>解析</strong><br>把常量池中符号引用（符号描述引用目标）转换成直接引用（指向目标的指针或句柄）</p><p><strong>初始化</strong><br>执行static代码块进行初始化，如果存在父类，先对父类进行初始化</p><p><strong>卸载</strong><br>条件（如何判断一个类是无用的类）：</p><ol><li>该类的所有的实例对象都被GC(堆不存在该类的实例对象)</li><li>该类没有再其他任何地方被引用</li><li>该类的类加载器的实例已被GC</li></ol><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>Java类加载器从上至下为：</p><ul><li>bootstrap classloader   启动类加载器</li><li>extension classloader   扩展类加载器</li><li>application classloader 应用程序类加载器</li><li>user classloader        用户自定义类加载器<br>加载类的时候自下而上查询父类加载器是否已加载当前类，如果没有从顶向下加载该类</li></ul><p><strong>什么场景需要自定义user classloader</strong></p><ul><li>隔离加载器：在框架内进行中间件与应用的模块隔离，把类加载到不同的环境</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露：java代码容易被编译和篡改，可以进行编译加密 =&gt; 自定义累加器还原加密字节码</li></ul><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p><img src="/2022/03/21/jvm/java_heap.png" alt="Java Heap"></p><h2 id="如何判断对象是否死亡"><a href="#如何判断对象是否死亡" class="headerlink" title="如何判断对象是否死亡"></a>如何判断对象是否死亡</h2><ol><li>引用计数法<br>引用=&gt; count+1; 引用结束=&gt; count-1; 如果count=0=&gt;无引用。但是无法解决循环引用的问题</li><li>可达性分析<br>如果GC root到对应有引用链路说明该对象可达，如果没有可达引用链，则死亡</li></ol><p><strong>可作为GC root的对象</strong></p><ol><li>虚拟机栈中引用对象</li><li>本地native方法引用对象</li><li>方法区静态属性引用对象</li><li>被同步锁持有的对象</li></ol><h2 id="简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。"><a href="#简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。" class="headerlink" title="简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。"></a>简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。</h2><ol><li>强引用 内存不够都不会被回收的引用对象，会抛出OOM</li><li>软引用 内存不够会被回收的引用对象</li><li>弱引用 不管内存够不够， gc都会回收的引用对象</li><li>虚引用 用于跟踪对象被垃圾回收的活动，一般和引用队列联合使用</li></ol><h2 id="垃圾收集有哪些算法，各自的特点？"><a href="#垃圾收集有哪些算法，各自的特点？" class="headerlink" title="垃圾收集有哪些算法，各自的特点？"></a>垃圾收集有哪些算法，各自的特点？</h2><ol><li>标记 - 清除 通过GC root标记还存活的对象，然后清楚未被标记的对象。<br>问题： 空间碎片</li><li>标记 - 复制 复制存活的对象到另一块区域，然后整片清空原区域，解决了空间碎片的问题</li><li>标记 - 整理 标记所有存货的对象，把标记对象往一端移动<h2 id="HotSpot-为什么要分为新生代和老年代？"><a href="#HotSpot-为什么要分为新生代和老年代？" class="headerlink" title="HotSpot 为什么要分为新生代和老年代？"></a>HotSpot 为什么要分为新生代和老年代？</h2><h2 id="常见的垃圾回收器有哪些？"><a href="#常见的垃圾回收器有哪些？" class="headerlink" title="常见的垃圾回收器有哪些？"></a>常见的垃圾回收器有哪些？</h2>serial<br>parallel<br>CMS<br>G1<h3 id="介绍一下-CMS-G1-收集器。"><a href="#介绍一下-CMS-G1-收集器。" class="headerlink" title="介绍一下 CMS,G1 收集器。"></a>介绍一下 CMS,G1 收集器。</h3>CMS</li></ol><ul><li>初始标记：寻找GC root直接关联的对象 STW</li><li>并发标记存活对象</li><li>重新标记， STW (修正并发标记期间因用户线程产生变动的对象)</li><li>并发清除<br>缺点： 碎片空间, 无法清理浮动垃圾；对CPU资源敏感<br>G1：Garbage first</li><li>把区域分成几个region</li><li>初始标记 STW</li><li>并发标记</li><li>最终标记 STW</li><li>筛选回收 STW, 会根据用户设置的停顿注定回收计划（维护一个优先列表，每次根据允许的收集事件优先选择回收价值最大的region), 需要回收的region中的存活对象复制到空的region，同时清理旧的region。<h2 id="Minor-GC-和-Full-GC-有什么不同呢？"><a href="#Minor-GC-和-Full-GC-有什么不同呢？" class="headerlink" title="Minor GC 和 Full GC 有什么不同呢？"></a>Minor GC 和 Full GC 有什么不同呢？</h2>Eden区满了之后会触发Minor GC，把存活的对象放到Survivor0, Survivor0满了之后会触发Minor GC，会把存活的对象放到Survivor1，然后from和to指针会交换。<br>老年代占满了就会触发Full GC，Full GC包括新生代和老年代的GC<br>老年代空间不足的情况：</li></ul><ol><li>占用内存过大的对象会直接保存到老年代，但这个时候老年代空间不足</li><li>promotion failure: Survivor区存活的对象年龄达到设定值，会将对象拷贝到老年代<h2 id="频繁Full-GC"><a href="#频繁Full-GC" class="headerlink" title="频繁Full GC"></a>频繁Full GC</h2></li></ol><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;JVM(Java Virtual Machine) - Java 虚拟机，它是 Java 实现平台无关性的基石。&lt;/p&gt;
&lt;p&gt;Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://shaelyncoding.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="https://shaelyncoding.github.io/2022/03/16/javaBasis/"/>
    <id>https://shaelyncoding.github.io/2022/03/16/javaBasis/</id>
    <published>2022-03-16T12:08:22.000Z</published>
    <updated>2022-03-21T03:54:14.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h2><ul><li>面向对象（封装，继承，多态）</li><li>平台无关性，一次编写，随处运行(Write once, run anywhere) -&gt; 跨平台；保证这一点的正是JVM机制</li><li>支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）</li><li>编译与解释并存<span id="more"></span></li></ul><h2 id="比较需要关注的方面"><a href="#比较需要关注的方面" class="headerlink" title="比较需要关注的方面:"></a>比较需要关注的方面:</h2><ul><li>jvm 内存区域/垃圾回收</li><li>类加载过程 class loader</li><li>反射/泛型/lamda</li><li>IO/NIO</li><li>解释执行/动态编译</li></ul><h2 id="JVM、JDK、JRE的区别"><a href="#JVM、JDK、JRE的区别" class="headerlink" title="JVM、JDK、JRE的区别"></a>JVM、JDK、JRE的区别</h2><p>JVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p><p>JRE： Java Runtime Environment, Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p><p>JDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p><img src="/2022/03/16/javaBasis/jvm_jdk_jre.png" alt="JVM、JDK和JRE"></p><h2 id="Java源代码运行过程"><a href="#Java源代码运行过程" class="headerlink" title="Java源代码运行过程"></a>Java源代码运行过程</h2><p>字节码: JVM可以理解的代码，即扩展名为.class的文件。（java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点）<br><img src="/2022/03/16/javaBasis/compile.png" alt="compile"></p><p>JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。</p><p>我们可以将高级编程语言按照程序的执行方式分为两种：</p><p><strong>编译型</strong> ：编译型语言 会通过编译器将源代码<strong>一次性翻译</strong>成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</p><p><strong>解释型</strong> ：解释型语言会通过解释器<strong>一句一句</strong>的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</p><p><strong>Java 语言既具有编译型语言的特征，也具有解释型语言的特征</strong>。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。</p><h2 id="自动拆箱-封箱"><a href="#自动拆箱-封箱" class="headerlink" title="自动拆箱/封箱"></a>自动拆箱/封箱</h2><p>装箱：将基本类型用它们对应的引用类型包装起来；<br>拆箱：将包装类型转换为基本数据类型；<br>装箱其实就是调用了包装类的<code>valueOf()</code>方法，拆箱其实就是调用了<code>xxxValue()</code>方法。<br><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code><br><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>;<br><strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p><h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><ol><li><p>封装<br>封装是指把<em>一个对象的状态信息（也就是属性）</em>隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界<em>访问的方法</em>来操作属性。</p></li><li><p>继承<br>不同类型的对象，相互之间经常有一定数量的共同点。同时，每一个对象还定义了额外的特性使得他们与众不同。<br>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p></li></ol><ul><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法</li></ul><ol start="3"><li>多态<br>通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。<br>允许将子类类型的指针赋值给父类类型的指针，把不同的子类对象都当作父类来看。</li></ol><ul><li>两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）</li><li>多态存在的三个必要条件：继承；重写；父类引用指向子类对象：Parent p = new Child();</li></ul><p><strong>重载 overload</strong> 编译时多态，方法名相同，参数列表（类型/个数）不同</p><p><strong>重写 override</strong> 运行时多态，重写要求子类被重写方法与父类被重写方法有相同的返回类型，不能比父类被重写方法声明更多的异常</p><h2 id="接口-interface和抽象类-abstract-class有什么共同点和区别？"><a href="#接口-interface和抽象类-abstract-class有什么共同点和区别？" class="headerlink" title="接口 interface和抽象类 abstract class有什么共同点和区别？"></a>接口 interface和抽象类 abstract class有什么共同点和区别？</h2><p>接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。<br>共同点 ：</p><ul><li>都不能被实例化。</li><li>都可以包含抽象方法。</li><li>都可以有默认实现的方法（Java 8 可以用 default 关键在接口中定义默认方法）。</li></ul><p>区别 ：</p><ul><li>接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。</li><li>一个类只能继承一个类，但是可以实现多个接口。</li><li>接口中的成员变量只能是<code>public static final</code>类型的，不能被修改且必须有初始值，而抽象类的成员变量默认<code>default</code>，可在子类中被重新定义，也可被重新赋值。</li></ul><h2 id="final-关键字有什么作用？"><a href="#final-关键字有什么作用？" class="headerlink" title="final 关键字有什么作用？"></a>final 关键字有什么作用？</h2><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p><ul><li><p>被 final 修饰的类不可以被继承, 如String</p></li><li><p>被 final 修饰的方法不可以被重写</p></li><li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p></li></ul><h2 id="java中创建对象的方式"><a href="#java中创建对象的方式" class="headerlink" title="java中创建对象的方式"></a>java中创建对象的方式</h2><ul><li>new 创建新对象</li><li>通过反射机制</li><li>采用 clone 机制</li><li>通过序列化机制</li></ul><h2 id="String、StringBuffer、StringBuilder-的区别？"><a href="#String、StringBuffer、StringBuilder-的区别？" class="headerlink" title="String、StringBuffer、StringBuilder 的区别？"></a>String、StringBuffer、StringBuilder 的区别？</h2><p>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。<br>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。<br>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</p><blockquote><p>在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 StringBuilder 以复用，StringBuilder 对象是在循环内部被创建的，这意味着每循环一次就会创建一个 StringBuilder 对象。</p></blockquote><p><strong>String 为什么是不可变的?</strong></p><ul><li>保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。</li><li>String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。</li></ul><h2 id="Exception-Error"><a href="#Exception-Error" class="headerlink" title="Exception/Error"></a>Exception/Error</h2><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:</p><p>Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p><p><img src="/2022/03/16/javaBasis/error_exception.webp" alt="Error和Exception"></p><p><strong>Checked Exception</strong> 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。</p><blockquote><p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException)</p></blockquote><p><strong>Unchecked Exception</strong> 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p><blockquote><p>RuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等)</p></blockquote><p>Error ：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p><h2 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="==和equals的区别"></a>==和equals的区别</h2><p>== 对于基本类型和引用类型的作用效果是不同的:</p><ul><li>对于基本数据类型来说，==比较的是值</li><li>对于引用数据类型来说，==比较的是对象的内存地址<blockquote><p>因为java只有值传递，所有对于==而言，不管是比较基本数据类型还是引用数据类型，本质都是比较值，只是引用类型变量存的值是对象的地址<br><code>equals</code>的比较：</p></blockquote></li></ul><ol><li>类没有覆盖<code>equals()</code>方法，等价于==，使用的默认是Object类equals()方法</li><li>类覆盖了<code>equals()</code>方法，一般都会覆盖<code>equals()</code>方法来比较两个对象的值是否相等，如String<h3 id="equals-hashcode"><a href="#equals-hashcode" class="headerlink" title="equals() / hashcode()"></a>equals() / hashcode()</h3></li></ol><ul><li>如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。 </li><li>如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。 </li><li>如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。</li></ul><h2 id="Java-中-IO-流"><a href="#Java-中-IO-流" class="headerlink" title="Java 中 IO 流"></a>Java 中 IO 流</h2><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的:<br>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。<br>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</p><p>按操作方式分类结构图：</p><p><img src="/2022/03/16/javaBasis/IO.png" alt="Java IO"></p><h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h2><blockquote><p>问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</p></blockquote><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Java语言特点&quot;&gt;&lt;a href=&quot;#Java语言特点&quot; class=&quot;headerlink&quot; title=&quot;Java语言特点&quot;&gt;&lt;/a&gt;Java语言特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;面向对象（封装，继承，多态）&lt;/li&gt;
&lt;li&gt;平台无关性，一次编写，随处运行(Write once, run anywhere) -&amp;gt; 跨平台；保证这一点的正是JVM机制&lt;/li&gt;
&lt;li&gt;支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）&lt;/li&gt;
&lt;li&gt;编译与解释并存&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="java" scheme="https://shaelyncoding.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 141 环形链表</title>
    <link href="https://shaelyncoding.github.io/2020/02/17/hasCycle/"/>
    <id>https://shaelyncoding.github.io/2020/02/17/hasCycle/</id>
    <published>2020-02-17T13:38:46.000Z</published>
    <updated>2022-03-20T10:53:38.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表的头节点 head ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p><span id="more"></span><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>遍历node存入hashset，看是否已存在</li><li>快慢指针</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给你一个链表的头节点 head ，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。&lt;/p&gt;
&lt;p&gt;如果链表中存在环 ，则返回 true 。 否则，返回 false 。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://shaelyncoding.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 31 下一个排列</title>
    <link href="https://shaelyncoding.github.io/2020/02/17/next-permutation/"/>
    <id>https://shaelyncoding.github.io/2020/02/17/next-permutation/</id>
    <published>2020-02-17T11:10:18.000Z</published>
    <updated>2022-03-20T09:16:27.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p><span id="more"></span><ul><li><p>例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。<br>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p></li><li><p>例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。</p></li><li><p>类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。<br>而-  arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。<br>给你一个整数数组 nums ，找出 nums 的下一个排列。</p></li></ul><p>必须 原地 修改，只允许使用额外常数空间。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>从后向前查找第一个相邻升序的元素对(i，j), A[i] &lt; A[j] =&gt;(j,end)必然降序 (无升序元素对=&gt;[begin,end]降序，直接步骤4逆转)</li><li>在[j,end) 从后向前找第一个满足A[k] &gt; A[i]</li><li>交换A[i],A[k] =&gt; (j,end)必然降序</li><li>逆转(j,end)</li></ol><p><img src="/2020/02/17/next-permutation/step1.png"><br><img src="/2020/02/17/next-permutation/step2.png"><br><img src="/2020/02/17/next-permutation/step3.png"><br><img src="/2020/02/17/next-permutation/step4.png"></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; nums[i]&gt;=nums[j]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> k=len-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k&gt;j &amp;&amp; nums[k]&lt;=nums[i]) &#123;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, i, k);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverse(nums, j, len-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> end-begin+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> len/<span class="number">2</span>+len%<span class="number">2</span>+begin;</span><br><span class="line">        <span class="keyword">while</span> (start&lt;=end) &#123;</span><br><span class="line">            swap(nums, start, begin+end-start);</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://shaelyncoding.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建github.io</title>
    <link href="https://shaelyncoding.github.io/2020/02/16/hexo_blog/"/>
    <id>https://shaelyncoding.github.io/2020/02/16/hexo_blog/</id>
    <published>2020-02-15T16:00:00.000Z</published>
    <updated>2022-02-17T13:28:02.144Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo搭建github.io创建blog,分为以下四步:</p><span id="more"></span><ol><li>github创建repo</li><li>Node.js安装</li><li>Hexo安装</li><li>Hexo主题更换</li></ol><p>此处省略第一二步，有时间再补</p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><ol><li>npm安装hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>hexo初始化: 命令貌似需要在根目录执行，否则会报错<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure></li><li>进入blog文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate (hexo g)</span><br><span class="line">$ hexo server (hexo s)</span><br></pre></td></tr></table></figure></li><li>更新到remote<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy (hexo d)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo主题更换"><a href="#Hexo主题更换" class="headerlink" title="Hexo主题更换"></a>Hexo主题更换</h2><p>hexo的主题url: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> (点主题下方的name可以进入对应的git repo)<br>以下拿next举例:</p><ol><li><p>安装主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>修改_config.yml<br>theme: next</p></li><li><p>测试部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo设置categories-tags"><a href="#Hexo设置categories-tags" class="headerlink" title="Hexo设置categories/tags"></a>Hexo设置categories/tags</h2><ol><li><p>在根目录下scaffolds/post.md中，添加一行 categories:</p></li><li><p>new page</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>在categories/index.md最后加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>tags同理</p></li><li><p>编写md文章的时候，在开头加上categories: 的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo搭建github.io</span><br><span class="line">categories: </span><br><span class="line">  - 配置</span><br><span class="line">tags: </span><br><span class="line">  - Hexo</span><br><span class="line">date: 2020-02-16 00:00:00</span><br></pre></td></tr></table></figure><h2 id="Hexo插入图片"><a href="#Hexo插入图片" class="headerlink" title="Hexo插入图片"></a>Hexo插入图片</h2></li><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>hexo的配置文件 _config.yml<br>post_asset_folder: true</p></li><li><p>自动生成文章同名文件夹用于存放照片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;file-name&gt;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hexo搭建github.io创建blog,分为以下四步:&lt;/p&gt;</summary>
    
    
    
    <category term="配置" scheme="https://shaelyncoding.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="https://shaelyncoding.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
